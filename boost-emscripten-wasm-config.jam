# Boost.Build Configuration
# Automatically generated by bootstrap.sh

import option ;
import feature ;

# Compiler configuration. This definition will be used unless
# you already have defined some toolsets in your user-config.jam
# file.
if ! gcc in [ feature.values <toolset> ]
{
    using gcc ; 
}

project : default-build <toolset>gcc ;

# Python configuration
import python ;
if ! [ python.configured ]
{
    using python : 2.7 : /usr ;
}

path-constant ICU_PATH : /usr ;


# List of --with-<library> and --without-<library>
# options. If left empty, all libraries will be built.
# Options specified on the command line completely
# override this variable.
libraries =  ;

# These settings are equivivalent to corresponding command-line
# options.
option.set prefix : /usr/local ;
option.set exec-prefix : /usr/local ;
option.set libdir : /usr/local/lib ;
option.set includedir : /usr/local/include ;

# Stop on first error
option.set keep-going : false ;

using clang : emscripten
  : emcc
  :   <root>${HPCWASM_BIN_DIR_EMSCRIPTEN}
      <archiver>${HPCWASM_BIN_DIR_EMSCRIPTEN}/emar
      <ranlib>${HPCWASM_BIN_DIR_EMSCRIPTEN}/emranlib
      <linker>${HPCWASM_BIN_DIR_EMSCRIPTEN}/emlink
      <cxxflags>-std=c++11 
      <linkflags>--no-threads -v -s ERROR_ON_UNDEFINED_SYMBOLS=0 -s WASM=1 -s TOTAL_MEMORY=1073676288 -s WASM_MEM_MAX=1073676288 -s \"BINARYEN_METHOD='native-wasm'\" -s \"BINARYEN_TRAP_MODE='allow'\"
;

import type : change-generated-target-suffix ;
type.change-generated-target-suffix EXE : <toolset-clang:version>emscripten : js ;